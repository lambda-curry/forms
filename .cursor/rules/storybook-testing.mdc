---
description: Rules for writing Storybook Playwright tests in the lambda-curry/forms repository
globs: **/*.stories.tsx,apps/docs/**/*.mdx
alwaysApply: false
---
You are an expert in Storybook, Playwright testing, React, TypeScript, Remix Hook Form, Zod validation, and the lambda-curry/forms monorepo architecture.

# Project Context
This is a monorepo containing form components with comprehensive Storybook interaction testing. The testing setup combines Storybook's component isolation with modern interaction testing patterns using play functions and the @storybook/test utilities.

## Key Technologies
- Storybook 9.0.1 with React and Vite
- @storybook/test for interaction testing utilities (userEvent, expect, canvas)
- @storybook/test-runner for Playwright automation
- React Router stub decorator for form handling
- Remix Hook Form + Zod for validation testing
- Yarn 4.7.0 with corepack
- TypeScript throughout

## Project Structure
```
lambda-curry/forms/
├── apps/docs/                    # Storybook app
│   ├── .storybook/              # Storybook configuration
│   ├── src/remix-hook-form/     # Story files with tests
│   ├── simple-server.js         # Custom static server for testing
│   └── package.json             # Test scripts
├── packages/components/         # Component library
│   └── src/
│       ├── remix-hook-form/     # Form components
│       └── ui/                  # UI components
└── .cursor/rules/               # Cursor rules directory
```

# Environment Setup and Testing Infrastructure

## Prerequisites
Before running Playwright tests locally, ensure the following setup is complete:

### 1. System Dependencies
```bash
# Install Node.js dependencies
cd apps/docs
yarn install

# Install Playwright browsers
npx playwright install

# Install system dependencies for Playwright
npx playwright install-deps
```

### 2. Build Storybook Static Files
```bash
cd apps/docs
yarn build  # Creates storybook-static directory
```

### 3. Server Setup for Local Testing
Due to common port conflicts in development environments, use the custom static server for local testing:

```bash
# Start the custom static server (handles port conflicts)
cd apps/docs
node simple-server.js &  # Runs on port 45678
```

The `simple-server.js` file provides:
- Static file serving with proper MIME types
- CORS headers for cross-origin requests
- SPA routing fallback to index.html
- Conflict-free port allocation (45678)

### 4. Run Tests Locally
```bash
# Run tests against the static server
cd apps/docs
npx test-storybook --url http://127.0.0.1:45678
```

## Complete Local Testing Workflow
```bash
# Full local testing workflow from scratch
cd apps/docs

# 1. Install dependencies (if needed)
yarn install
npx playwright install
npx playwright install-deps

# 2. Build Storybook
yarn build

# 3. Start static server
node simple-server.js &

# 4. Run tests
npx test-storybook --url http://127.0.0.1:45678

# 5. Stop server when done
pkill -f "simple-server.js"
```

## Troubleshooting Common Issues

### Port Conflicts
If you encounter "EADDRINUSE" errors:
- **Problem**: Default ports (6006, 6007, 8080, etc.) are occupied
- **Solution**: Use the custom static server on port 45678
- **Alternative**: Find available ports with `netstat -tulpn | grep :PORT`

### Browser Installation Issues
If Playwright can't find browsers:
```bash
# Reinstall browsers
npx playwright install chromium

# Install system dependencies
npx playwright install-deps
```

### Build Issues
If Storybook build fails:
```bash
# Clean and rebuild
rm -rf storybook-static
yarn build
```

### Test Execution Issues
- **Timeout errors**: Increase timeout in test configuration
- **Element not found**: Ensure proper async handling with `findBy*`
- **Server not responding**: Verify static server is running on correct port

# Core Principles for Storybook Testing

## Story Structure Pattern
- Follow the three-phase testing pattern: Default state → Invalid submission → Valid submission
- Each story serves dual purposes: documentation AND automated tests
- Use play functions for comprehensive interaction testing
- Test complete user workflows, not isolated units

## Essential Code Elements
Always include these in Storybook test stories:

### Required Imports
```typescript
import type { Meta, StoryContext, StoryObj } from '@storybook/react';
import { expect, userEvent } from '@storybook/test';
import { withReactRouterStubDecorator } from '../lib/storybook/react-router-stub';
```

### Form Schema Setup
```typescript
const formSchema = z.object({
  fieldName: z.string().min(1, 'Field is required'),
});
type FormData = z.infer<typeof formSchema>;
```

### Component Wrapper Pattern
```typescript
const ControlledComponentExample = () => {
  const fetcher = useFetcher<{ message: string }>();
  const methods = useRemixForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: { /* defaults */ },
    fetcher,
    submitConfig: { action: '/', method: 'post' },
  });

  return (
    <RemixFormProvider {...methods}>
      <fetcher.Form onSubmit={methods.handleSubmit}>
        {/* Component and form elements */}
      </fetcher.Form>
    </RemixFormProvider>
  );
};
```

## Story Configuration and Decorator Patterns

### Meta Configuration Best Practices
Keep meta configuration minimal and avoid global decorators that apply to all stories:

```typescript
// ✅ GOOD - Clean meta without global decorators
const meta: Meta<typeof ComponentName> = {
  title: 'Category/Component Name',
  component: ComponentName,
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: 'Component documentation...',
      },
    },
  },
  tags: ['autodocs'],
} satisfies Meta<typeof ComponentName>;
```

### Individual Story Decorator Pattern
**ALWAYS** place decorators on individual stories, not in meta configuration. This provides:
- **Granular Control**: Each story can have its own routing/context setup
- **Better Isolation**: Stories that don't need complex setup remain simple
- **Clearer Intent**: Explicit about which stories require which dependencies
- **Easier Testing**: Simple test stories can run without complex router setup

```typescript
// ✅ GOOD - Decorators on individual stories
export const ServerDrivenExample: Story = {
  args: {},
  decorators: [
    withReactRouterStubDecorator({
      routes: [
        {
          path: '/',
          Component: ComponentWithLoader,
          loader: handleDataFetch,
        },
      ],
    }),
  ],
  play: async (context) => {
    // Test implementation
  },
};

export const ClientSideExample: Story = {
  args: {},
  decorators: [
    withReactRouterStubDecorator({
      routes: [
        {
          path: '/client-side',
          Component: ComponentWithoutLoader,
        },
      ],
    }),
  ],
  play: async (context) => {
    // Test implementation
  },
};

export const SimpleTest: Story = {
  args: {},
  // No decorators needed for simple component tests
  play: async (context) => {
    // Simple test without router dependencies
  },
};
```

### Router Configuration Patterns
Different stories may need different router configurations:

```typescript
// Server-side data fetching story
export const WithLoader: Story = {
  decorators: [
    withReactRouterStubDecorator({
      routes: [
        {
          path: '/',
          Component: DataTableWithBazzaFilters,
          loader: async ({ request }) => {
            // Server-side data fetching logic
            return { data: [], meta: {}, facetedCounts: {} };
          },
        },
      ],
    }),
  ],
};

// Client-side only story
export const ClientSideOnly: Story = {
  decorators: [
    withReactRouterStubDecorator({
      routes: [
        {
          path: '/client',
          Component: ClientSideComponent,
          // No loader needed
        },
      ],
    }),
  ],
};

// Form submission story
export const FormSubmission: Story = {
  decorators: [
    withReactRouterStubDecorator({
      routes: [
        {
          path: '/',
          Component: FormComponent,
          action: async ({ request }) => {
            const { data, errors } = await getValidatedFormData(request, schema);
            if (errors) return { errors };
            return { message: 'Success!' };
          },
        },
      ],
    }),
  ],
};
```

## Testing Patterns

### User Interaction Best Practices
```typescript
// ✅ ALWAYS click before clearing inputs
await userEvent.click(input);
await userEvent.clear(input);
await userEvent.type(input, 'new value');

// ✅ Use findBy* for async elements
const message = await canvas.findByText('Success message');
expect(message).toBeInTheDocument();

// ✅ Use queryBy* to check non-existence
expect(canvas.queryByText('Should not exist')).not.toBeInTheDocument();
```

### Three-Phase Test Structure
```typescript
export const Default: Story = {
  play: async (storyContext) => {
    // Phase 1: Test initial state
    testDefaultValues(storyContext);
    
    // Phase 2: Test validation/error states
    await testInvalidSubmission(storyContext);
    
    // Phase 3: Test success scenarios
    await testValidSubmission(storyContext);
  },
  decorators: [withReactRouterStubDecorator({ /* config */ })],
};
```

### React Router Stub Decorator
```typescript
withReactRouterStubDecorator({
  routes: [{
    path: '/',
    Component: ControlledComponentExample,
    action: async ({ request }) => {
      const { data, errors } = await getValidatedFormData<FormData>(
        request, 
        zodResolver(formSchema)
      );
      if (errors) return { errors };
      return { message: 'Form submitted successfully' };
    },
  }],
})
```

## Deprecated Patterns - DO NOT USE

❌ **Never place decorators in meta configuration**
```typescript
// BAD - applies to ALL stories, reduces flexibility
const meta: Meta<typeof Component> = {
  decorators: [withReactRouterStubDecorator({ /* config */ })],
  // ...
};
```

❌ **Never use getBy* for async elements**
```typescript
// BAD - will fail for async content
const message = canvas.getByText('Success message');
```

❌ **Never clear inputs without clicking first**
```typescript
// BAD - unreliable
await userEvent.clear(input);
```

❌ **Never use regular forms instead of fetcher.Form**
```typescript
// BAD - won't work with React Router stub
<form onSubmit={methods.handleSubmit}>
```

❌ **Never test multiple unrelated scenarios in one story**
```typescript
// BAD - stories should be focused
export const AllScenarios: Story = { /* testing everything */ };
```

## File Naming and Organization
- Story files: `component-name.stories.tsx` in `apps/docs/src/remix-hook-form/`
- Use kebab-case for file names
- Group related test functions together
- Export individual test functions for reusability

## Testing Utilities and Helpers

### Canvas Queries
```typescript
// Form elements
const input = canvas.getByLabelText('Field Label');
const button = canvas.getByRole('button', { name: 'Submit' });
const select = canvas.getByRole('combobox');

// Async content
const errorMessage = await canvas.findByText('Error message');
const successMessage = await canvas.findByText('Success');
```

### Common Test Patterns
```typescript
// Form validation testing
const testInvalidSubmission = async ({ canvas }: StoryContext) => {
  const submitButton = canvas.getByRole('button', { name: 'Submit' });
  await userEvent.click(submitButton);
  expect(await canvas.findByText('Field is required')).toBeInTheDocument();
};

// Conditional field testing
const testConditionalFields = async ({ canvas }: StoryContext) => {
  const trigger = canvas.getByLabelText('Show advanced options');
  expect(canvas.queryByLabelText('Advanced Field')).not.toBeInTheDocument();
  await userEvent.click(trigger);
  expect(canvas.getByLabelText('Advanced Field')).toBeInTheDocument();
};
```

## Performance and Best Practices

### Test Execution Optimization
- **Fast Feedback**: Tests should complete in under 10 seconds
- **Parallel Execution**: Leverage Playwright's parallel test execution
- **Focused Testing**: Each story should test one primary workflow
- **Efficient Selectors**: Use semantic queries (role, label) over CSS selectors

### Local Development Workflow
```bash
# Local development commands
cd apps/docs
yarn dev                 # Start Storybook for development
yarn test:local         # Run tests against running Storybook (if available)

# Local testing of built Storybook
yarn build              # Build static Storybook
node simple-server.js & # Start custom server
npx test-storybook --url http://127.0.0.1:45678  # Test built version
```

### Codegen Testing Workflow
This setup is optimized for Codegen agents and local development testing:
```bash
# Codegen workflow for testing built Storybook
cd apps/docs
yarn install
npx playwright install
npx playwright install-deps
yarn build
node simple-server.js &
npx test-storybook --url http://127.0.0.1:45678
```

## Project Structure
```
lambda-curry/forms/
├── apps/docs/                    # Storybook app
│   ├── .storybook/              # Storybook configuration
│   ├── src/remix-hook-form/     # Remix Hook Form story files with tests
│   ├── simple-server.js         # Custom static server for testing
│   └── package.json             # Test scripts
├── packages/components/         # Main component library (Remix Hook Form)
│   └── src/
│       ├── remix-hook-form/     # Form components
│       └── ui/                  # UI components
└── .cursor/rules/               # Cursor rules directory
```


# Modern Storybook Interaction Testing

## Core Principles
- **Stories as Tests**: Every story can be a render test; complex stories include interaction tests
- **Play Functions**: Use play functions to simulate user behavior and assert on results
- **Canvas Queries**: Use Testing Library queries through the canvas parameter
- **User Events**: Simulate real user interactions with userEvent
- **Step Grouping**: Organize complex interactions with the step function
- **Visual Debugging**: Debug tests visually in the Storybook UI

## Essential Imports for Interaction Testing
```typescript
import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';
import { withReactRouterStubDecorator } from '../lib/storybook/react-router-stub';
```

## Story Structure with Play Functions

### Basic Interaction Test Pattern
```typescript
export const FilledForm: Story = {
  play: async ({ canvas, userEvent }) => {
    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');
    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');
    
    // 👇 Trigger form submission
    await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
    
    // 👇 Assert DOM structure
    await expect(
      canvas.getByText('Form submitted successfully!')
    ).toBeInTheDocument();
  },
};
```

### Advanced Pattern with Step Grouping
```typescript
export const CompleteWorkflow: Story = {
  play: async ({ canvas, userEvent, step }) => {
    await step('Fill out form fields', async () => {
      await userEvent.type(canvas.getByLabelText('Email'), 'user@example.com');
      await userEvent.type(canvas.getByLabelText('Password'), 'securepassword');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
    });

    await step('Verify success state', async () => {
      await expect(
        canvas.getByText('Welcome! Your account is ready.')
      ).toBeInTheDocument();
    });
  },
};
```

## Canvas Queries - Testing Library Integration

### Query Types and When to Use Them
| Query Type | 0 Matches | 1 Match | >1 Matches | Awaited | Use Case |
|------------|-----------|---------|------------|---------|----------|
| `getBy*` | Throw error | Return element | Throw error | No | Elements that should exist |
| `queryBy*` | Return null | Return element | Throw error | No | Elements that may not exist |
| `findBy*` | Throw error | Return element | Throw error | Yes | Async elements |
| `getAllBy*` | Throw error | Return array | Return array | No | Multiple elements |
| `queryAllBy*` | Return [] | Return array | Return array | No | Multiple elements (optional) |
| `findAllBy*` | Throw error | Return array | Return array | Yes | Multiple async elements |

### Query Priority (Recommended Order)
1. **ByRole** - Find elements by accessible role (most user-like)
2. **ByLabelText** - Find form elements by associated label
3. **ByPlaceholderText** - Find inputs by placeholder
4. **ByText** - Find elements by text content
5. **ByDisplayValue** - Find inputs by current value
6. **ByAltText** - Find images by alt text
7. **ByTitle** - Find elements by title attribute
8. **ByTestId** - Find by data-testid (last resort)

### Common Query Examples
```typescript
// Semantic queries (preferred)
const submitButton = canvas.getByRole('button', { name: 'Submit' });
const emailInput = canvas.getByLabelText('Email Address');
const dropdown = canvas.getByRole('combobox', { name: 'Country' });

// Async queries for dynamic content
const successMessage = await canvas.findByText('Form submitted successfully');
const errorList = await canvas.findAllByRole('alert');

// Conditional queries
const optionalField = canvas.queryByLabelText('Optional Field');
expect(optionalField).not.toBeInTheDocument();
```

## UserEvent Interactions

### Common UserEvent Methods
```typescript
// Clicking elements
await userEvent.click(element);
await userEvent.dblClick(element);

// Typing and input
await userEvent.type(input, 'text to type');
await userEvent.clear(input);
await userEvent.paste(input, 'pasted text');

// Keyboard interactions
await userEvent.keyboard('{Enter}');
await userEvent.tab();

// Selection
await userEvent.selectOptions(select, 'option-value');
await userEvent.deselectOptions(select, 'option-value');

// File uploads
await userEvent.upload(fileInput, file);

// Hover interactions
await userEvent.hover(element);
await userEvent.unhover(element);
```

### Form Interaction Best Practices
```typescript
// ✅ ALWAYS click before clearing inputs (for focus)
await userEvent.click(input);
await userEvent.clear(input);
await userEvent.type(input, 'new value');

// ✅ Use proper selection for dropdowns
await userEvent.click(canvas.getByRole('combobox'));
await userEvent.click(canvas.getByRole('option', { name: 'Option Text' }));

// ✅ Handle file uploads properly
const file = new File(['content'], 'test.txt', { type: 'text/plain' });
await userEvent.upload(canvas.getByLabelText('Upload File'), file);
```

## Three-Phase Testing Pattern

### Complete Story Structure
```typescript
export const FormValidationWorkflow: Story = {
  play: async ({ canvas, userEvent, step }) => {
    // Phase 1: Test initial state
    await step('Verify initial state', async () => {
      expect(canvas.getByLabelText('Email')).toHaveValue('');
      expect(canvas.queryByRole('alert')).not.toBeInTheDocument();
    });

    // Phase 2: Test validation/error states
    await step('Test validation errors', async () => {
      await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
      
      await expect(
        canvas.findByText('Email is required')
      ).resolves.toBeInTheDocument();
    });

    // Phase 3: Test success scenarios
    await step('Test successful submission', async () => {
      await userEvent.type(canvas.getByLabelText('Email'), 'user@example.com');
      await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
      
      await expect(
        canvas.findByText('Form submitted successfully')
      ).resolves.toBeInTheDocument();
    });
  },
  decorators: [withReactRouterStubDecorator({ /* config */ })],
};
```

## Mocking and Setup Patterns

### beforeEach for State Reset
```typescript
// In .storybook/preview.ts
const preview: Preview = {
  async beforeEach() {
    // Reset any global state before each story
    MockDate.reset();
    localStorage.clear();
  },
};
```

### Story-level Setup
```typescript
export const WithMockedData: Story = {
  async beforeEach() {
    // Setup specific to this story
    MockDate.set('2024-02-14');
    
    return () => {
      // Cleanup after story
      MockDate.reset();
    };
  },
  play: async ({ canvas }) => {
    // Test with mocked date
  },
};
```

### Mocked Module Testing
```typescript
// Import mocked modules
import { saveNote } from '#app/actions.mock';

export const SaveFlow: Story = {
  play: async ({ canvas, userEvent }) => {
    await userEvent.click(canvas.getByRole('button', { name: 'Save' }));
    
    // Assert on mock function behavior
    await expect(saveNote).toHaveBeenCalledWith({
      title: 'Test Note',
      content: 'Test content'
    });
  },
};
```

# Environment Setup and Testing Infrastructure

## Prerequisites
Before running interaction tests locally, ensure the following setup is complete:

### 1. System Dependencies
```bash
# Install Node.js dependencies
cd apps/docs
yarn install

# Install Playwright browsers (for test-runner)
npx playwright install

# Install system dependencies for Playwright
npx playwright install-deps
```

### 2. Build Storybook Static Files
```bash
cd apps/docs
yarn build  # Creates storybook-static directory
```

### 3. Server Setup for Local Testing
Due to common port conflicts in development environments, use the custom static server for local testing:

```bash
# Start the custom static server (handles port conflicts)
cd apps/docs
node simple-server.js &  # Runs on port 45678
```

### 4. Run Tests Locally
```bash
# Run tests against the static server
cd apps/docs
npx test-storybook --url http://127.0.0.1:45678
```

## Running Interaction Tests

### In Storybook UI
- Open Storybook in development mode: `yarn dev`
- Navigate to any story with a play function
- Use the Interactions panel to:
  - View step-by-step execution
  - Pause, resume, and rewind interactions
  - Debug failures with detailed error information
  - Create permalinks for bug reproduction

### Via Test Runner (Automated)
```bash
# Run all interaction tests
npx test-storybook --url http://127.0.0.1:45678

# Run specific story pattern
npx test-storybook --url http://127.0.0.1:45678 --testNamePattern="FormComponent"

# Run with verbose output
npx test-storybook --url http://127.0.0.1:45678 --verbose
```

## Component Wrapper Pattern for Forms

### Controlled Component Setup
```typescript
const ControlledComponentExample = () => {
  const fetcher = useFetcher<{ message: string }>();
  const methods = useRemixForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: { /* defaults */ },
    fetcher,
    submitConfig: { action: '/', method: 'post' },
  });

  return (
    <RemixFormProvider {...methods}>
      <fetcher.Form onSubmit={methods.handleSubmit}>
        {/* Component and form elements */}
      </fetcher.Form>
    </RemixFormProvider>
  );
};
```

### React Router Stub Decorator
```typescript
withReactRouterStubDecorator({
  routes: [{
    path: '/',
    Component: ControlledComponentExample,
    action: async ({ request }) => {
      const { data, errors } = await getValidatedFormData<FormData>(
        request, 
        zodResolver(formSchema)
      );
      if (errors) return { errors };
      return { message: 'Form submitted successfully' };
    },
  }],
})
```

## Best Practices and Patterns

### Accessibility-First Testing
```typescript
// ✅ Use semantic queries that match user behavior
const submitButton = canvas.getByRole('button', { name: 'Submit Form' });
const emailField = canvas.getByLabelText('Email Address');

// ✅ Test keyboard navigation
await userEvent.tab();
expect(canvas.getByLabelText('First Field')).toHaveFocus();
```

### Error Handling Patterns
```typescript
// ✅ Test both client and server validation
await step('Test client validation', async () => {
  await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
  await expect(canvas.findByText('Required field')).resolves.toBeInTheDocument();
});

await step('Test server validation', async () => {
  // Fill form with invalid server-side data
  await userEvent.type(canvas.getByLabelText('Email'), 'invalid-email');
  await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
  await expect(canvas.findByText('Invalid email format')).resolves.toBeInTheDocument();
});
```

### Conditional Logic Testing
```typescript
export const ConditionalFields: Story = {
  play: async ({ canvas, userEvent, step }) => {
    await step('Verify initial state', async () => {
      expect(canvas.queryByLabelText('Advanced Options')).not.toBeInTheDocument();
    });

    await step('Show conditional fields', async () => {
      await userEvent.click(canvas.getByLabelText('Show Advanced'));
      expect(canvas.getByLabelText('Advanced Options')).toBeInTheDocument();
    });

    await step('Hide conditional fields', async () => {
      await userEvent.click(canvas.getByLabelText('Show Advanced'));
      expect(canvas.queryByLabelText('Advanced Options')).not.toBeInTheDocument();
    });
  },
};
```

## Deprecated Patterns - DO NOT USE

❌ **Never use getBy* for async elements**
```typescript
// BAD - will fail for async content
const message = canvas.getByText('Success message');

// GOOD - use findBy* for async content
const message = await canvas.findByText('Success message');
```

❌ **Never clear inputs without clicking first**
```typescript
// BAD - unreliable, may not have focus
await userEvent.clear(input);

// GOOD - ensure focus first
await userEvent.click(input);
await userEvent.clear(input);
```

❌ **Never use regular forms instead of fetcher.Form**
```typescript
// BAD - won't work with React Router stub
<form onSubmit={methods.handleSubmit}>

// GOOD - use fetcher.Form for router integration
<fetcher.Form onSubmit={methods.handleSubmit}>
```

❌ **Never test multiple unrelated scenarios in one story**
```typescript
// BAD - stories should be focused
export const AllScenarios: Story = { 
  play: async () => {
    // Testing login, registration, password reset all in one
  }
};

// GOOD - separate focused stories
export const LoginFlow: Story = { /* focused on login */ };
export const RegistrationFlow: Story = { /* focused on registration */ };
```

❌ **Never use CSS selectors when semantic queries are available**
```typescript
// BAD - fragile and not accessible
const button = canvas.getBySelector('.submit-btn');

// GOOD - semantic and accessible
const button = canvas.getByRole('button', { name: 'Submit' });
```

## File Naming and Organization
- Story files: `component-name.stories.tsx` in `apps/docs/src/remix-hook-form/`
- Use kebab-case for file names
- Group related test functions together
- Export individual test functions for reusability

## Performance and Debugging

### Test Execution Optimization
- **Fast Feedback**: Tests should complete in under 10 seconds
- **Focused Testing**: Each story should test one primary workflow
- **Efficient Selectors**: Use semantic queries (role, label) over CSS selectors
- **Step Grouping**: Use step function for better debugging and organization

### Debug Mode and Troubleshooting
```bash
# Run tests with debug output
npx test-storybook --url http://127.0.0.1:45678 --verbose

# Debug specific story in Storybook UI
yarn dev  # Then navigate to story and use Interactions panel
```

### Common Error Patterns and Solutions
1. **Element not found**: Use proper async queries (`findBy*`) and ensure elements exist
2. **Timing issues**: Add appropriate waits for async operations
3. **Form submission failures**: Verify fetcher setup and router configuration
4. **Port conflicts**: Use the custom static server solution
5. **Focus issues**: Always click before clearing or typing in inputs

## Verification Checklist
When creating or modifying Storybook interaction tests, ensure:

1. ✅ Story includes all three test phases (default, invalid, valid)
2. ✅ Uses React Router stub decorator on individual stories (not meta)
3. ✅ Follows click-before-clear pattern for inputs
4. ✅ Uses findBy* for async assertions
5. ✅ Tests both client-side and server-side validation
6. ✅ Includes proper error handling and success scenarios
7. ✅ Story serves as both documentation and test
8. ✅ Component is properly isolated and focused
9. ✅ Tests complete in reasonable time (< 10 seconds)
10. ✅ Uses semantic queries for better maintainability
11. ✅ Decorators are placed on individual stories for granular control
12. ✅ Meta configuration is kept clean and minimal

## Team Workflow Integration

### Code Review Guidelines
- Verify interaction tests cover happy path and error scenarios
- Ensure stories are self-documenting and demonstrate component usage
- Check that tests follow established patterns and conventions
- Validate that new tests don't introduce flaky behavior
- **Verify decorators are on individual stories, not in meta**
- Ensure each story has appropriate isolation and dependencies

### Local Development Focus
- Use Storybook UI for interactive development and debugging
- Leverage Interactions panel for step-by-step test execution
- Test against built Storybook static files for consistency
- Custom server resolves common port conflicts in development environments
- Fast feedback loop optimized for developer productivity
- Individual story decorators provide flexibility for different testing scenarios

Remember: Every story should test real user workflows and serve as living documentation. Focus on behavior, not implementation details. The testing infrastructure should be reliable, fast, and easy to maintain for local development and Codegen workflows. **Always place decorators on individual stories for maximum flexibility and clarity.**

### Testing Portaled UI (Select, Popover, Combobox)

- Open the trigger first, then query the portaled content (many libs render to document.body).
- Query portal content from document.body using findByRole/waitFor; avoid raw setTimeout.
- Give the trigger a stable accessible name via aria-label; do not rely on placeholder text (it changes after selection).
- Prefer role-based queries:
  - role="listbox" for the popup container
  - role="option" for items
- It’s OK to assert component-specific data attributes for positioning checks (e.g., data-slot="popover-content", data-align="end").
- After selection or Escape, assert teardown with waitFor(() => expect(document.body.querySelector('[data-slot="popover-content"]').toBeNull())).
- In play functions, use within(document.body) to scope queries to the portal when needed.
- For controlled components, use the correct handler (e.g., onValueChange) so state updates reflect in assertions.

Example snippet:
```
await step('Open', async () => {
  const trigger = await canvas.findByRole('combobox', { name: 'Favorite state' });
  await userEvent.click(trigger);
  const listbox = await within(document.body).findByRole('listbox');
  expect(listbox).toBeInTheDocument();
});

await step('Select and close', async () => {
  await userEvent.keyboard('{ArrowDown}{Enter}');
  await waitFor(() => {
    expect(document.body.querySelector('[data-slot="popover-content"]').toBeNull());
  });
});
```

