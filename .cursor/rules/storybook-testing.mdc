---
type: Always
description: Rules for writing Storybook Playwright tests in the lambda-curry/forms repository
---

You are an expert in Storybook, Playwright testing, React, TypeScript, Remix Hook Form, react-hook-form, @medusajs/ui, Zod validation, and the lambda-curry/forms monorepo architecture.

# Project Context
This is a monorepo containing form components with comprehensive Storybook Playwright testing. The testing setup combines Storybook's component isolation with Playwright's browser automation to create real-world testing scenarios.

## Key Technologies
- Storybook 8.6.7 with React and Vite
- @storybook/test-runner for Playwright automation
- @storybook/test for testing utilities (userEvent, expect, canvas)
- React Router stub decorator for form handling
- Remix Hook Form + Zod for validation testing (main components)
- react-hook-form + @medusajs/ui for Medusa Forms components
- Yarn 4.7.0 with corepack
- TypeScript throughout

## Project Structure
```
lambda-curry/forms/
├── apps/docs/                    # Storybook app
│   ├── .storybook/              # Storybook configuration
│   ├── src/remix-hook-form/     # Remix Hook Form story files with tests
│   ├── src/medusa-forms/        # Medusa Forms story files with tests
│   ├── simple-server.js         # Custom static server for testing
│   └── package.json             # Test scripts
├── packages/components/         # Main component library (Remix Hook Form)
│   └── src/
│       ├── remix-hook-form/     # Form components
│       └── ui/                  # UI components
├── packages/medusa-forms/       # Medusa Forms component library
│   └── src/
│       ├── controlled/          # Controlled components using react-hook-form
│       └── ui/                  # UI components using @medusajs/ui
└── .cursor/rules/               # Cursor rules directory
```

# Environment Setup and Testing Infrastructure

## Prerequisites
Before running Playwright tests locally, ensure the following setup is complete:

### 1. System Dependencies
```bash
# Install Node.js dependencies
cd apps/docs
yarn install

# Install Playwright browsers
npx playwright install

# Install system dependencies for Playwright
npx playwright install-deps
```

### 2. Build Storybook Static Files
```bash
cd apps/docs
yarn build  # Creates storybook-static directory
```

### 3. Server Setup for Local Testing
Due to common port conflicts in development environments, use the custom static server for local testing:

```bash
# Start the custom static server (handles port conflicts)
cd apps/docs
node simple-server.js &  # Runs on port 45678
```

The `simple-server.js` file provides:
- Static file serving with proper MIME types
- CORS headers for cross-origin requests
- SPA routing fallback to index.html
- Conflict-free port allocation (45678)

### 4. Run Tests Locally
```bash
# Run tests against the static server
cd apps/docs
npx test-storybook --url http://127.0.0.1:45678
```

## Complete Local Testing Workflow
```bash
# Full local testing workflow from scratch
cd apps/docs

# 1. Install dependencies (if needed)
yarn install
npx playwright install
npx playwright install-deps

# 2. Build Storybook
yarn build

# 3. Start static server
node simple-server.js &

# 4. Run tests
npx test-storybook --url http://127.0.0.1:45678

# 5. Stop server when done
pkill -f "simple-server.js"
```

## Troubleshooting Common Issues

### Port Conflicts
If you encounter "EADDRINUSE" errors:
- **Problem**: Default ports (6006, 6007, 8080, etc.) are occupied
- **Solution**: Use the custom static server on port 45678
- **Alternative**: Find available ports with `netstat -tulpn | grep :PORT`

### Browser Installation Issues
If Playwright can't find browsers:
```bash
# Reinstall browsers
npx playwright install chromium

# Install system dependencies
npx playwright install-deps
```

### Build Issues
If Storybook build fails:
```bash
# Clean and rebuild
rm -rf storybook-static
yarn build
```

### Test Execution Issues
- **Timeout errors**: Increase timeout in test configuration
- **Element not found**: Ensure proper async handling with `findBy*`
- **Server not responding**: Verify static server is running on correct port

# Core Principles for Storybook Testing

## Story Structure Pattern
- Follow the three-phase testing pattern: Default state → Invalid submission → Valid submission
- Each story serves dual purposes: documentation AND automated tests
- Use play functions for comprehensive interaction testing
- Test complete user workflows, not isolated units

## Essential Code Elements
Always include these in Storybook test stories:

### Required Imports
```typescript
import type { Meta, StoryContext, StoryObj } from '@storybook/react';
import { expect, userEvent } from '@storybook/test';
import { withReactRouterStubDecorator } from '../lib/storybook/react-router-stub';
```

### Form Schema Setup
```typescript
const formSchema = z.object({
  fieldName: z.string().min(1, 'Field is required'),
});
type FormData = z.infer<typeof formSchema>;
```

### Component Wrapper Pattern
```typescript
const ControlledComponentExample = () => {
  const fetcher = useFetcher<{ message: string }>();
  const methods = useRemixForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: { /* defaults */ },
    fetcher,
    submitConfig: { action: '/', method: 'post' },
  });

  return (
    <RemixFormProvider {...methods}>
      <fetcher.Form onSubmit={methods.handleSubmit}>
        {/* Component and form elements */}
      </fetcher.Form>
    </RemixFormProvider>
  );
};
```

## Testing Patterns

### User Interaction Best Practices
```typescript
// ✅ ALWAYS click before clearing inputs
await userEvent.click(input);
await userEvent.clear(input);
await userEvent.type(input, 'new value');

// ✅ Use findBy* for async elements
const message = await canvas.findByText('Success message');
expect(message).toBeInTheDocument();

// ✅ Use queryBy* to check non-existence
expect(canvas.queryByText('Should not exist')).not.toBeInTheDocument();
```

### Three-Phase Test Structure
```typescript
export const Default: Story = {
  play: async (storyContext) => {
    // Phase 1: Test initial state
    testDefaultValues(storyContext);
    
    // Phase 2: Test validation/error states
    await testInvalidSubmission(storyContext);
    
    // Phase 3: Test success scenarios
    await testValidSubmission(storyContext);
  },
  decorators: [withReactRouterStubDecorator({ /* config */ })],
};
```

### React Router Stub Decorator
```typescript
withReactRouterStubDecorator({
  routes: [{
    path: '/',
    Component: ControlledComponentExample,
    action: async ({ request }) => {
      const { data, errors } = await getValidatedFormData<FormData>(
        request, 
        zodResolver(formSchema)
      );
      if (errors) return { errors };
      return { message: 'Form submitted successfully' };
    },
  }],
})
```

## Deprecated Patterns - DO NOT USE

❌ **Never use getBy* for async elements**
```typescript
// BAD - will fail for async content
const message = canvas.getByText('Success message');
```

❌ **Never clear inputs without clicking first**
```typescript
// BAD - unreliable
await userEvent.clear(input);
```

❌ **Never use regular forms instead of fetcher.Form**
```typescript
// BAD - won't work with React Router stub
<form onSubmit={methods.handleSubmit}>
```

❌ **Never test multiple unrelated scenarios in one story**
```typescript
// BAD - stories should be focused
export const AllScenarios: Story = { /* testing everything */ };
```

## File Naming and Organization
- Story files: `component-name.stories.tsx` in `apps/docs/src/remix-hook-form/`
- Use kebab-case for file names
- Group related test functions together
- Export individual test functions for reusability

## Testing Utilities and Helpers

### Canvas Queries
```typescript
// Form elements
const input = canvas.getByLabelText('Field Label');
const button = canvas.getByRole('button', { name: 'Submit' });
const select = canvas.getByRole('combobox');

// Async content
const errorMessage = await canvas.findByText('Error message');
const successMessage = await canvas.findByText('Success');
```

### Common Test Patterns
```typescript
// Form validation testing
const testInvalidSubmission = async ({ canvas }: StoryContext) => {
  const submitButton = canvas.getByRole('button', { name: 'Submit' });
  await userEvent.click(submitButton);
  expect(await canvas.findByText('Field is required')).toBeInTheDocument();
};

// Conditional field testing
const testConditionalFields = async ({ canvas }: StoryContext) => {
  const trigger = canvas.getByLabelText('Show advanced options');
  expect(canvas.queryByLabelText('Advanced Field')).not.toBeInTheDocument();
  await userEvent.click(trigger);
  expect(canvas.getByLabelText('Advanced Field')).toBeInTheDocument();
};
```

## Performance and Best Practices

### Test Execution Optimization
- **Fast Feedback**: Tests should complete in under 10 seconds
- **Parallel Execution**: Leverage Playwright's parallel test execution
- **Focused Testing**: Each story should test one primary workflow
- **Efficient Selectors**: Use semantic queries (role, label) over CSS selectors

### Local Development Workflow
```bash
# Local development commands
cd apps/docs
yarn dev                 # Start Storybook for development
yarn test:local         # Run tests against running Storybook (if available)

# Local testing of built Storybook
yarn build              # Build static Storybook
node simple-server.js & # Start custom server
npx test-storybook --url http://127.0.0.1:45678  # Test built version
```

### Codegen Testing Workflow
This setup is optimized for Codegen agents and local development testing:
```bash
# Codegen workflow for testing built Storybook
cd apps/docs
yarn install
npx playwright install
npx playwright install-deps
yarn build
node simple-server.js &
npx test-storybook --url http://127.0.0.1:45678
```

## Advanced Testing Patterns

### Accessibility Testing
```typescript
// Include accessibility checks in stories
import { checkA11y } from '@storybook/addon-a11y';

export const AccessibilityTest: Story = {
  play: async (storyContext) => {
    await checkA11y(storyContext.canvasElement);
    // Additional accessibility-specific tests
  },
};
```

### Visual Regression Testing
```typescript
// Use Playwright's screenshot capabilities
export const VisualTest: Story = {
  play: async ({ canvasElement }) => {
    // Interact with component to desired state
    // Screenshot will be taken automatically by test-runner
  },
};
```

### Cross-Browser Testing
```typescript
// Configure multiple browsers in test-runner config
// Tests run automatically across Chromium, Firefox, WebKit
```

## Error Handling and Debugging

### Debug Mode
```bash
# Run tests with debug output
npx test-storybook --url http://127.0.0.1:45678 --verbose

# Run specific story
npx test-storybook --url http://127.0.0.1:45678 --testNamePattern="ComponentName"
```

### Common Error Patterns
1. **Element not found**: Use proper async queries (`findBy*`)
2. **Timing issues**: Add appropriate waits for async operations
3. **Form submission failures**: Verify fetcher setup and router configuration
4. **Port conflicts**: Use the custom static server solution

## Verification Checklist
When creating or modifying Storybook tests, ensure:

1. ✅ Story includes all three test phases (default, invalid, valid)
2. ✅ Uses React Router stub decorator for form handling
3. ✅ Follows click-before-clear pattern for inputs
4. ✅ Uses findBy* for async assertions
5. ✅ Tests both client-side and server-side validation
6. ✅ Includes proper error handling and success scenarios
7. ✅ Story serves as both documentation and test
8. ✅ Component is properly isolated and focused
9. ✅ Tests complete in reasonable time (< 10 seconds)
10. ✅ Uses semantic queries for better maintainability

## Team Workflow Integration

### Code Review Guidelines
- Verify test coverage includes happy path and error scenarios
- Ensure stories are self-documenting and demonstrate component usage
- Check that tests follow established patterns and conventions
- Validate that new tests don't introduce flaky behavior

### Local Development Focus
- This setup is designed for local development and Codegen testing
- Tests run against built Storybook static files for consistency
- Custom server resolves common port conflicts in development environments
- Fast feedback loop optimized for developer productivity

Remember: Every story should test real user workflows and serve as living documentation. Focus on behavior, not implementation details. The testing infrastructure should be reliable, fast, and easy to maintain for local development and Codegen workflows.
