{
  "name": "field-wrapper",
  "type": "registry:ui",
  "description": "field wrapper component",
  "dependencies": [
    "@medusajs/ui"
  ],
  "registryDependencies": [
    "field-error",
    "label"
  ],
  "files": [
    {
      "name": "fieldwrapper.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport { FieldError } from './Error';\nimport { Label } from './Label';\nimport type { FieldWrapperProps } from './types';\n\nexport const FieldWrapper = <T,>({\n  label,\n  labelClassName,\n  labelTooltip,\n  wrapperClassName,\n  errorClassName,\n  formErrors,\n  name,\n  children,\n  ...props\n}: FieldWrapperProps<T>) => (\n  <div className={wrapperClassName}>\n    {label && (\n      <Label\n        htmlFor={typeof name === 'string' ? name : undefined}\n        tooltip={typeof labelTooltip === 'string' ? labelTooltip : undefined}\n        className={labelClassName}\n      >\n        {label}\n      </Label>\n    )}\n    {children({ ...props, name } as T)}\n    {formErrors && name ? <FieldError className={errorClassName} name={name} errors={formErrors} /> : null}\n  </div>\n);\n"
    },
    {
      "name": "types.d.ts",
      "content": "import type { ReactNode, RefAttributes } from 'react';\nimport type { Props, SelectInstance } from 'react-select';\nimport type { CreatableProps } from 'react-select/creatable';\n\nexport interface BasicFieldProps {\n  label?: ReactNode;\n  labelClassName?: string;\n  labelTooltip?: ReactNode;\n  wrapperClassName?: string;\n  errorClassName?: string;\n  formErrors?: { [x: string]: unknown };\n  name?: string;\n}\n\nexport interface FieldWrapperProps<T> extends BasicFieldProps, T {\n  children: (args: T) => ReactNode;\n}\n\nexport type TextAreaProps = Omit<\n  React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>,\n  'ref'\n> &\n  React.RefAttributes<HTMLTextAreaElement>;\n\nexport type MedusaCurrencyInputProps = Omit<React.InputHTMLAttributes<HTMLInputElement>, 'defaultValue' | 'step'> & {\n  symbol: string;\n  code: string;\n  size?: 'small' | 'base';\n  defaultValue?: string | number;\n  step?: number;\n};\n\nexport type MedusaInputProps = React.InputHTMLAttributes<HTMLInputElement> & {\n  size?: 'small' | 'base';\n};\n\ninterface PickerProps extends CalendarProps {\n  /**\n   * The class name to apply on the date picker.\n   */\n  className?: string;\n  /**\n   * Whether the date picker's input is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Whether the date picker's input is required.\n   */\n  required?: boolean;\n  /**\n   * The date picker's placeholder.\n   */\n  placeholder?: string;\n  /**\n   * The date picker's size.\n   */\n  size?: 'small' | 'base';\n  /**\n   * Whether to show a time picker along with the date picker.\n   */\n  showTimePicker?: boolean;\n  /**\n   * Translation keys for the date picker. Use this to localize the date picker.\n   */\n  translations?: Translations;\n  id?: string;\n  'aria-invalid'?: boolean;\n  'aria-label'?: string;\n  'aria-labelledby'?: string;\n  'aria-required'?: boolean;\n}\n\ntype DatePickerValueProps = {\n  defaultValue?: Date | null;\n  value?: Date | null;\n  onChange?: (value: Date | null) => void;\n  isDateUnavailable?: (date: Date) => boolean;\n  minValue?: Date;\n  maxValue?: Date;\n  shouldCloseOnSelect?: boolean;\n  granularity?: Granularity;\n  size?: 'base' | 'small';\n  className?: string;\n  modal?: boolean;\n};\ninterface DatePickerProps\n  extends Omit<BaseDatePickerProps<CalendarDateTime | CalendarDate>, keyof DatePickerValueProps>,\n    DatePickerValueProps {}\n\n// export type DatePickerProps = (\n//   | {\n//       mode?: 'single';\n//       presets?: DatePreset[];\n//       defaultValue?: Date;\n//       value?: Date;\n//       onChange?: (date: Date | null) => void;\n//     }\n//   | {\n//       mode: 'range';\n//       presets?: DateRangePreset[];\n//       defaultValue?: DateRange;\n//       value?: DateRange;\n//       onChange?: (dateRange: DateRange | null) => void;\n//     }\n// ) &\n//   PickerProps;\n\nexport type SearchableSelectProps = Props<Option, IsMulti, Group> &\n  RefAttributes<SelectInstance<Option, IsMulti, Group>>;\n\nexport type CreatableSelectProps = CreatableProps<Option, IsMulti, Group> &\n  RefAttributes<SelectInstance<Option, IsMulti, Group>>;\n\ninterface SelectProps extends React.ComponentPropsWithRef {\n  size?: 'base' | 'small';\n  children?: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n"
    }
  ]
}