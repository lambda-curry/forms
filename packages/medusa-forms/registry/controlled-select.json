{
  "name": "controlled-select",
  "type": "registry:ui",
  "description": "A select component with react-hook-form integration",
  "dependencies": [
    "@medusajs/ui",
    "react-hook-form",
    "@hookform/error-message"
  ],
  "files": [
    {
      "name": "controlled-select.tsx",
      "content": "\"use client\"\n\nimport type * as React from 'react'\nimport {\n  Controller,\n  type ControllerProps,\n  type FieldPathValue,\n  type FieldValues,\n  type Path,\n  type RegisterOptions,\n  useFormContext,\n} from 'react-hook-form'\nimport { Select, Label } from '@medusajs/ui'\nimport { ErrorMessage } from '@hookform/error-message'\n\nexport type ControlledSelectProps<T extends FieldValues> = Omit<ControllerProps, 'render'> & {\n  name: Path<T>\n  label?: string\n  placeholder?: string\n  required?: boolean\n  disabled?: boolean\n  className?: string\n  onBlur?: () => void\n  onChange?: (value: unknown) => void\n} & (\n  | {\n      options: { label: React.ReactNode; value: FieldPathValue<T, Path<T>> }[]\n      children?: never\n    }\n  | {\n      options?: never\n      children: React.ReactNode\n    }\n)\n\n/**\n * A controlled select component that integrates with react-hook-form.\n * \n * @example\n * ```tsx\n * import { useForm, FormProvider } from 'react-hook-form'\n * import { ControlledSelect } from '@/components/ui/controlled-select'\n * \n * function MyForm() {\n *   const methods = useForm()\n *   \n *   const options = [\n *     { label: 'Option 1', value: 'option1' },\n *     { label: 'Option 2', value: 'option2' },\n *   ]\n *   \n *   return (\n *     <FormProvider {...methods}>\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <ControlledSelect\n *           name=\"category\"\n *           label=\"Category\"\n *           placeholder=\"Select a category\"\n *           options={options}\n *           rules={{ required: 'Category is required' }}\n *         />\n *       </form>\n *     </FormProvider>\n *   )\n * }\n * ```\n */\nexport const ControlledSelect = <T extends FieldValues>({\n  name,\n  rules,\n  children,\n  options,\n  onChange,\n  onBlur,\n  label,\n  placeholder,\n  required,\n  ...props\n}: ControlledSelectProps<T>) => {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<T>()\n\n  return (\n    <div className=\"space-y-2\">\n      {label && (\n        <Label htmlFor={name}>\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </Label>\n      )}\n      <Controller<T>\n        control={control}\n        name={name}\n        rules={rules as Omit<RegisterOptions<T, Path<T>>, 'disabled' | 'valueAsNumber' | 'valueAsDate' | 'setValueAs'>}\n        render={({ field }) => {\n          const handleChange = (value: unknown) => {\n            if (typeof onChange === 'function') onChange(value)\n            field.onChange(value)\n          }\n\n          if (options) {\n            return (\n              <Select {...props} onValueChange={handleChange} value={field.value}>\n                <Select.Trigger>\n                  <Select.Value placeholder={placeholder} />\n                </Select.Trigger>\n                <Select.Content>\n                  {options.map((option) => (\n                    <Select.Item key={String(option.value)} value={option.value}>\n                      {option.label}\n                    </Select.Item>\n                  ))}\n                </Select.Content>\n              </Select>\n            )\n          }\n\n          return (\n            <Select {...props} onValueChange={handleChange} value={field.value}>\n              {children}\n            </Select>\n          )\n        }}\n      />\n      <ErrorMessage\n        errors={errors}\n        name={name}\n        render={({ message }) => (\n          <p className=\"text-sm text-red-500\">{message}</p>\n        )}\n      />\n    </div>\n  )\n}\n\n"
    }
  ]
}