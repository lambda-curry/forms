import{j as s}from"./jsx-runtime-CQsLhzk5.js";import{z as p,w,u as B,a as S,t as y,c as k,R,F as v,b as F,B as E,g as T}from"./remix-stub-UXp-yz1T.js";import{C as g}from"./checkbox-BRN3sR2B.js";import{e as b,u as d}from"./index-BvTlRpDL.js";import"./index-Wp2u197Z.js";import"./index-BB6wrN1E.js";import"./index-BFTZjNjp.js";import"./index-C5ITVP_u.js";import"./index-wUI45oDg.js";import"./check-DmlahKRE.js";import"./createLucideIcon-CkelgiAd.js";import"./form-C1Hedwuh.js";const n=[{value:"red",label:"Red"},{value:"blue",label:"Blue"},{value:"green",label:"Green"},{value:"yellow",label:"Yellow"},{value:"purple",label:"Purple"}],C=p.object({colors:p.record(p.boolean()).refine(e=>Object.values(e).some(t=>t),"Please select at least one color")}),D=()=>{var r,c,l;const e=B(),t=S({resolver:y(C),defaultValues:{colors:n.reduce((o,{value:a})=>({...o,[a]:!1}),{})},fetcher:e,submitConfig:{action:"/",method:"post"},submitHandlers:{onValid:o=>{const a=Object.entries(o.colors).filter(([i,u])=>u).map(([i])=>i),j=Object.fromEntries(Object.entries(o).filter(([i])=>!n.some(u=>u.value===i)));e.submit(k({...j,selectedColors:a}),{method:"post",action:"/"})}}});return console.log(t.formState),s.jsx(R,{...t,children:s.jsx(v,{onSubmit:t.handleSubmit,children:s.jsxs("div",{className:"space-y-4",children:[s.jsx("p",{className:"text-sm text-gray-500",children:"Select your favorite colors:"}),s.jsx("div",{className:"grid gap-4",children:n.map(({value:o,label:a})=>s.jsx(g,{className:"rounded-md border p-4",name:`colors.${o}`,label:a},o))}),s.jsx(F,{error:(c=(r=t.formState.errors.colors)==null?void 0:r.root)==null?void 0:c.message}),s.jsx(E,{type:"submit",className:"mt-4",children:"Submit"}),((l=e.data)==null?void 0:l.selectedColors)&&s.jsxs("div",{className:"mt-4",children:[s.jsx("p",{className:"text-sm font-medium",children:"Submitted with selected colors:"}),s.jsx("p",{className:"text-sm text-gray-500",children:e.data.selectedColors.join(", ")})]})]})})})},L=async e=>{const{data:t,errors:r}=await T(e,y(C));return r?{errors:r}:{message:"Colors selected successfully",selectedColors:Object.entries(t.colors).filter(([l,o])=>o).map(([l])=>{var o;return((o=n.find(a=>a.value===l))==null?void 0:o.label)??l})}},K={title:"RemixHookForm/CheckboxList",component:g,parameters:{layout:"centered"},tags:["autodocs"],decorators:[w({root:{Component:D,action:async({request:e})=>L(e)}})]},N=({canvas:e})=>{n.forEach(({label:t})=>{const r=e.getByLabelText(t);b(r).not.toBeChecked()})},O=async({canvas:e})=>{const t=e.getByRole("button",{name:"Submit"});await d.click(t),await b(await e.findByText("Please select at least one color")).toBeInTheDocument()},V=async({canvas:e})=>{const t=e.getByLabelText("Red"),r=e.getByLabelText("Blue");await d.click(t),await d.click(r);const c=e.getByRole("button",{name:"Submit"});await d.click(c),await b(await e.findByText("Red, Blue")).toBeInTheDocument()},m={parameters:{docs:{description:{story:"A checkbox list component for selecting multiple colors."}}},play:async e=>{N(e),await O(e),await V(e)}};var x,h,f;m.parameters={...m.parameters,docs:{...(x=m.parameters)==null?void 0:x.docs,source:{originalSource:`{
  parameters: {
    docs: {
      description: {
        story: 'A checkbox list component for selecting multiple colors.'
      }
    }
  },
  play: async storyContext => {
    testDefaultValues(storyContext);
    await testErrorState(storyContext);
    await testColorSelection(storyContext);
  }
}`,...(f=(h=m.parameters)==null?void 0:h.docs)==null?void 0:f.source}}};const Q=["Tests"];export{m as Tests,Q as __namedExportsOrder,K as default};
