import{j as a}from"./jsx-runtime-CQsLhzk5.js";import{n as S,l as E,m as I,e as N,f as k,h as _,b as U,k as D,z as x,w as V,u as L,a as M,R as q,B as v,g as A,t as g}from"./remix-stub-UXp-yz1T.js";import{r as F}from"./index-Wp2u197Z.js";import{a as $,b as P,F as O,c as H}from"./form-C1Hedwuh.js";import{e as m,u as o}from"./index-BvTlRpDL.js";import"./index-BB6wrN1E.js";const l=F.forwardRef(({className:e,type:t,...s},i)=>a.jsx("input",{type:t,className:S("flex h-10 w-full text-base sm:text-sm rounded-md border border-input bg-background px-3 py-2 ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",e),ref:i,...s}));l.displayName="Input";l.__docgenInfo={description:"",methods:[],displayName:"Input"};const u=F.forwardRef(({control:e,name:t,label:s,description:i,className:C,components:r,...R},j)=>a.jsx(E,{control:e,name:t,render:({field:d,fieldState:p})=>a.jsxs(I,{className:C,ref:j,children:[s&&a.jsx(N,{Component:r==null?void 0:r.FormLabel,children:s}),a.jsx(k,{Component:r==null?void 0:r.FormControl,children:a.jsx(l,{...d,...R,ref:d.ref})}),i&&a.jsx(_,{Component:r==null?void 0:r.FormDescription,children:i}),p.error&&a.jsx(U,{Component:r==null?void 0:r.FormMessage,children:p.error.message})]})}));u.displayName="TextField";u.__docgenInfo={description:"",methods:[],displayName:"TextField",props:{control:{required:!1,tsType:{name:"Control",elements:[{name:"TFieldValues"}],raw:"Control<TFieldValues>"},description:""},name:{required:!0,tsType:{name:"TName"},description:""},label:{required:!1,tsType:{name:"string"},description:""},description:{required:!1,tsType:{name:"string"},description:""},components:{required:!1,tsType:{name:"Partial",elements:[{name:"FieldComponents"}],raw:"Partial<FieldComponents>"},description:""}},composes:["Omit"]};function c(e){const{control:t}=D(),s={FormControl:$,FormLabel:P,FormDescription:O,FormMessage:H};return a.jsx(u,{control:t,components:s,...e})}c.__docgenInfo={description:"",methods:[],displayName:"TextField"};const T=x.object({username:x.string().min(3,"Username must be at least 3 characters")}),w="initial_user",h="taken",B="This username is already taken",K=()=>{var s;const e=L(),t=M({resolver:g(T),defaultValues:{username:w},fetcher:e,submitConfig:{action:"/username",method:"post"}});return a.jsx(q,{...t,children:a.jsxs(e.Form,{onSubmit:t.handleSubmit,children:[a.jsx(c,{name:"username",label:"Username",description:"Enter a unique username"}),a.jsx(v,{type:"submit",className:"mt-4",children:"Submit"}),((s=e.data)==null?void 0:s.message)&&a.jsx("p",{className:"mt-2 text-green-600",children:e.data.message})]})})},z=async e=>{const{errors:t,data:s,receivedValues:i}=await A(e,g(T));return t?{errors:t,defaultValues:i}:s.username===h?{errors:{username:{type:"manual",message:B}},defaultValues:i}:{message:"Form submitted successfully"}},ae={title:"RemixHookForm/TextField",component:c,parameters:{layout:"centered"},tags:["autodocs"],decorators:[V({root:{Component:K},routes:[{path:"/username",action:async({request:e})=>z(e)}]})]},G=({canvas:e})=>{const t=e.getByLabelText("Username");m(t).toHaveValue(w)},J=async({canvas:e})=>{const t=e.getByLabelText("Username"),s=e.getByRole("button",{name:"Submit"});await o.click(t),await o.clear(t),await o.type(t,"ab"),await o.click(s),await m(await e.findByText("Username must be at least 3 characters")).toBeInTheDocument()},Q=async({canvas:e})=>{const t=e.getByLabelText("Username"),s=e.getByRole("button",{name:"Submit"});await o.click(t),await o.clear(t),await o.type(t,h),await o.click(s),await new Promise(i=>setTimeout(i,1e3)),await m(e.getByText(B)).toBeInTheDocument()},W=async({canvas:e})=>{const t=e.getByLabelText("Username"),s=e.getByRole("button",{name:"Submit"});await o.click(t),await o.clear(t),await o.type(t,"valid_username"),await o.click(s);const i=await e.findByText("Form submitted successfully");m(i).toBeInTheDocument()},n={play:async e=>{G(e),await J(e),await Q(e),await W(e)}};var b,f,y;n.parameters={...n.parameters,docs:{...(b=n.parameters)==null?void 0:b.docs,source:{originalSource:`{
  play: async storyContext => {
    testDefaultValues(storyContext);
    await testInvalidSubmission(storyContext);
    await testUsernameTaken(storyContext);
    await testValidSubmission(storyContext);
  }
}`,...(y=(f=n.parameters)==null?void 0:f.docs)==null?void 0:y.source}}};const re=["Tests"];export{n as Tests,re as __namedExportsOrder,ae as default};
